// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Content {
  id      Int    @id @default(autoincrement())
  type    String
  index   Int
  content String
  post    Post?  @relation(fields: [postId], references: [id])
  postId  Int?

  // @@fulltext([content])
}

model PageContent {
  id      Int    @id @default(autoincrement())
  type    String
  content String
  page    Page?  @relation(fields: [pageId], references: [id])
  pageId  Int?

  // @@fulltext([content])
}

model Post {
  id        Int       @id @default(autoincrement())
  title     String
  mainImage String
  content   Content[]
  published Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Page {
  id          Int           @id @default(autoincrement())
  title       String
  content     PageContent[]
  path        String        @unique
  mainNavLink MainNavLink[]
  subNavLink  SubNavLink[]
}

model MainNavLink {
  id       Int          @id @default(autoincrement())
  title    String       @unique
  subLinks SubNavLink[]
  page     Page         @relation(fields: [pageId], references: [id])
  pageId   Int
  roleInclude   String[]
}

model SubNavLink {
  id         Int          @id @default(autoincrement())
  title      String
  mainLink   MainNavLink? @relation(fields: [mainLinkId], references: [id])
  mainLinkId Int?
  page       Page         @relation(fields: [pageId], references: [id])
  pageId     Int
  roleInclude   String[]
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  role          String?
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
